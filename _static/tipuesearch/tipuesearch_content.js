var tipuesearch_info = 'Generated by gti.py on 2020-04-16 17:50:03.801394';
var tipuesearch = {"pages": [{"title": "Contributor covenant code of conduct \u2014 Covasim  documentation", "tags": "", "url": "./conduct.html", "text": "Contributor covenant code of conduct \u00b6 Our pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at covasim @ idmod . org . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html . For answers to common questions about this code of conduct, see the FAQ ."}, {"title": "Contributing to Covasim \u2014 Covasim  documentation", "tags": "", "url": "./contributing.html", "text": "Contributing to Covasim \u00b6 Welcome! We are thrilled you are interested in contributing to Covasim. This document will help you get started. Please see the guidelines below to provide feedback or contribute to Covasim code. Note that we make no representations that the code works as intended or that we will provide support, address issues that are found, or accept pull requests. Getting started \u00b6 Contributions to this project are released to the public under the project\u2019s open source license . Note that this project is released with a Contributor Code of Conduct . By participating in this project you agree to abide by its terms. Review the documentation before you begin. Additionally, this content is also included in the following README files: Project README : Setup and project overview. Covasim README : Simulation parameters. Webapp README : Running the web application. Docker README : Information regarding the docker setup. Tests README : Running tests locally. Contribution types \u00b6 This is a fast-moving project with many opportunities to contribute across the project. We welcome the following types of contributions: Issues: Bug reports. Feature requests. Pull requests: Tests reproducing an issue. Bug fixes. Code to resolve open approved issues . Documentation improvements in the docs folder. All external communication about these contribution efforts is currently occurring on GitHub. Request new features or report bugs \u00b6 If you notice unexpected behavior or a limitation in Covasim, follow the steps below before requesting a new feature or reporting a bug. First, review the Covasim documentation to see if there is already functionality that supports what you want to do. In particular, check Parameters or this README to see if the behavior you observed might be expected and if configuration options are available to provide you with the desired behavior. Search the existing issues to see if there is already one that contains your feedback. If there is, add a thumbs up reaction to convey your interest in the issue being addressed. This helps the team gauge interest without the noise of comments, which trigger notifications to all watchers. Comments should be used only if you have new and useful information to share. Open a feature request \u00b6 When opening an issue to request a new feature, do the following: Provide a clear and descriptive title for the issue. Include as many details as possible in the body. Fully explain your use case, the problems you\u2019re hitting, and the solutions you\u2019d like to see to address those problems. Report a bug \u00b6 When opening an issue to report a bug, explain the problem and include additional details to help us reproduce the problem: Describe the specific steps that led to the problem you encountered with as many details as possible. Don\u2019t just say what you did, but explain how you did it. Provide specific examples to demonstrate the steps, such as links to files or projects, code snippets, or screen shots. Please use Markdown code blocks for code snippets. Describe the behavior you observed after following the steps and point out exactly what the problem with that behavior is, including explaining what you expected to see instead and why. Submit a pull request \u00b6 To contribute directly to Covasim code, do the following: Fork and clone the Covasim repository. Install Covasim on your machine. See Installation and setup or the project README . Create a new branch: git checkout - b my - branch - name Make your code changes, including a descriptive commit message. Push to your fork and submit a pull request. Although we make no guarantees that a submitted pull request will be accepted, PRs that meet the following criteria are more likely to be merged: Up-to-date with master with no merge conflicts Self-contained Fix a demonstrable limitation of bug Follow the current code style If the PR introduces a new feature, it has complete Google style docstrings and comments, and a test demonstrating its functionality Otherwise, sample code demonstrating old and new behavior (this can be in the PR comment on GitHub, not necessarily committed in the repo) If you have additional questions or comments, contact covasim @ idmod . org . Resources \u00b6 LitCovid MIDAS network How to contribute to open source Using pull requests GitHub help Contributor covenant code of conduct Our pledge Our standards Our responsibilities Scope Enforcement Attribution"}, {"title": "covasim.cruise_ship package \u2014 Covasim  documentation", "tags": "", "url": "./covasim.cruise_ship.html", "text": "covasim.cruise_ship package \u00b6 Submodules \u00b6 covasim.cruise_ship.model module \u00b6 This file contains all the code for a single run of the cruise ship flavor of Covasim. Based heavily on LEMOD-FP ( https://github.com/amath-idm/lemod_fp ). Version: 2020mar20 class covasim.cruise_ship.model. Person ( age = 0 , sex = 0 , crew = False , contacts = 0 ) \u00b6 Bases: covasim.base.Person Class for a single person. class covasim.cruise_ship.model. Sim ( pars = None , datafile = None ) \u00b6 Bases: covasim.base.BaseSim The Sim class handles the running of the simulation: the number of children, number of time points, and the parameters of the simulation. init_results ( ) \u00b6 Initialize results init_people ( seed_infections = 1 ) \u00b6 Create the people summary_stats ( ) \u00b6 Compute the summary statistics to display at the end of a run run ( seed_infections = 1 , verbose = None , calc_likelihood = False , do_plot = False , ** kwargs ) \u00b6 Run the simulation likelihood ( verbose = None ) \u00b6 Compute the log-likelihood of the current simulation based on the number of new diagnoses. plot ( do_save = None , fig_args = None , plot_args = None , scatter_args = None , axis_args = None , as_days = True , font_size = 18 , use_grid = True , verbose = None ) \u00b6 Plot the results \u2013 can supply arguments for both the figure and the plots. Parameters do_save ( bool or str ) \u2013 Whether or not to save the figure. If a string, save to that filename. fig_args ( dict ) \u2013 Dictionary of kwargs to be passed to pl.figure() plot_args ( dict ) \u2013 Dictionary of kwargs to be passed to pl.plot() as_days ( bool ) \u2013 Whether to plot the x-axis as days or time points Returns Return type Figure handle plot_people ( ) \u00b6 Use imshow() to show all individuals as rows, with time as columns, one pixel per timestep per person covasim.cruise_ship.parameters module \u00b6 Set the parameters for COVID-ABM. covasim.cruise_ship.parameters. make_pars ( ) \u00b6 Set parameters for the simulation covasim.cruise_ship.parameters. get_age_sex ( is_crew = False , min_age = 18 , max_age = 99 , crew_age = 35 , crew_std = 5 , guest_age = 68 , guest_std = 8 ) \u00b6 Define age-sex distributions. Passenger age distribution based on: https://www.nytimes.com/reuters/2020/02/12/world/asia/12reuters-china-health-japan.html \u201cAbout 80% of the passengers were aged 60 or over [=2130], with 215 in their 80s and 11 in the 90s, the English-language Japan Times newspaper reported.\u201d covasim.cruise_ship.parameters. load_data ( filename = None ) \u00b6 Load data for comparing to the model output covasim.cruise_ship.test_cruise_sim module \u00b6 Cruise-ship specific tests covasim.cruise_ship.test_cruise_sim. test_parsobj ( ) \u00b6 covasim.cruise_ship.test_cruise_sim. test_sim ( doplot = False ) \u00b6"}, {"title": "covasim.data package \u2014 Covasim  documentation", "tags": "", "url": "./covasim.data.html", "text": "covasim.data package \u00b6 Submodules \u00b6 covasim.data.country_age_distributions module \u00b6 covasim.data.country_age_distributions. get_country_age_distributions ( ) \u00b6 This is the following file: https://github.com/neherlab/covid19_scenarios/blob/master/src/assets/data/country_age_distribution.json expressed as a function. covasim.data.loaders module \u00b6 Load data covasim.data.loaders. get_age_distribution ( location = None ) \u00b6 Load age distribution for a given country or countries. Parameters location ( str or list ) \u2013 name of the country or countries to load the age distribution for Returns Numpy array of age distributions Return type age_data (array) Module contents \u00b6"}, {"title": "covasim.webapp package \u2014 Covasim  documentation", "tags": "", "url": "./covasim.webapp.html", "text": "covasim.webapp package \u00b6 Submodules \u00b6 covasim.webapp.cova_app module \u00b6 Sciris app to run the web interface. covasim.webapp.cova_app. get_defaults ( region = None , merge = False ) \u00b6 Get parameter defaults covasim.webapp.cova_app. map_social_distance ( scenario , web_pars ) \u00b6 map social distance to intervention covasim.webapp.cova_app. map_school_closures ( scenario , web_pars ) \u00b6 map social distance to intervention covasim.webapp.cova_app. map_symptomatic_testing ( scenario , web_pars ) \u00b6 map social distance to intervention covasim.webapp.cova_app. map_contact_tracing ( scenario , web_pars ) \u00b6 map social distance to intervention covasim.webapp.cova_app. get_version ( ) \u00b6 Get the version covasim.webapp.cova_app. upload_pars ( fname ) \u00b6 covasim.webapp.cova_app. upload_file ( file ) \u00b6 covasim.webapp.cova_app. get_gnatt ( intervention_pars = None , intervention_config = None ) \u00b6 covasim.webapp.cova_app. run_sim ( sim_pars = None , epi_pars = None , intervention_pars = None , datafile = None , show_animation = False , n_days = 90 , verbose = True ) \u00b6 Create, run, and plot everything covasim.webapp.cova_app. get_individual_states ( sim , order = True ) \u00b6 covasim.webapp.cova_app. plot_people ( sim ) \u2192 dict \u00b6 covasim.webapp.cova_app. animate_people ( sim ) \u2192 dict \u00b6"}, {"title": "Data scrapers \u2014 Covasim  documentation", "tags": "", "url": "./data.html", "text": "Data scrapers \u00b6 These scripts pull data from various sources for use in Covasim. To run all scrapers, simply type: ./ run_scrapers Contents 1. Corona Data Scraper 2. European Centre for Disease Prevention and Control 3. The COVID Tracking Project 4. Demographic data scraper 1. Corona Data Scraper \u00b6 To quote the Corona Data Scraper web page, Corona Data Scraper pulls COVID-19 Coronavirus case data from verified sources, finds the corresponding GeoJSON features, and adds population data. We transform this data for use in the Covasim parameter format. It is stored in CSV format. Updating \u00b6 To update the Corona Data Scraper data: python data / load_corona_data_scraper_data . py This will create a file corona_data_scraper.csv in the data/epi_data directory. Data dictionary \u00b6 The following columns are present in the data: name : Apparently, a unique name for the data set level : level of the data (country, state, county, city) city : The city name county : The county or parish state : The state, province, or region country : [ ISO 3166-1 alpha-3 country code]( https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3 ) population : The estimated population of the location lat : latitude long : longitude url : Data source aggregate tz : Time zone recovered : Cumulative number recovered (as of date) active : Cumulative number active (as of date) growthFactor : date : Date in yyyy-MM-dd text format day : Number of days since first reporting positives : Cumulative number of positive cases (as of date) death : Cumulative number of deaths (as of date) tests : Cumulative number of tests (as of date) new_positives : New positives on this date new_active : New active cases on this date new_death : Number of deaths on this date new_tests : New tests on this date As of April 4, 2020, there are apparently 3280 data sets. 2. European Centre for Disease Prevention and Control \u00b6 To quote the European Centre for Disease Prevention and Control web page, Since the beginning of the coronavirus pandemic, ECDC\u2019s Epidemic Intelligence team has been collecting the number of COVID-19 cases and deaths, based on reports from health authorities worldwide. This comprehensive and systematic process is carried out on a daily basis. To insure the accuracy and reliability of the data, this process is being constantly refined. This helps to monitor and interpret the dynamics of the COVID-19 pandemic not only in the European Union (EU), the European Economic Area (EEA), but also worldwide. We transform this data for use in the Covasim parameter format. It is stored in CSV format. Updating \u00b6 To update the Corona Data Scraper data: python data / load_ecdp_data . py This will create a file ecdp_data.csv in the data/epi_data directory. This adds data from 204 countries and territories (as of April 5, 2020), including Africa, Asia, the Americas, Europe, and Oceania. More details at: https://www.ecdc.europa.eu/en/geographical-distribution-2019-ncov-cases The following columns are present in the data: countriesAndTerritories : Unique country or territory name geoId : Geo ID of same countryterritoryCode : ISO 3-letter code? date : Date in yyyy-MM-dd text format day : Number of days since first reporting new_positives : New positives on this date new_death : Number of deaths on this date 3. The COVID Tracking Project \u00b6 The COVID Tracking Project \u201cobtains, organizes, and publishes high-quality data required to understand and respond to the COVID-19 outbreak in the United States.\u201d The project website is https://covidtracking.com We transform this data for use in the Covasim parameter format. It is stored in CSV format. Updating \u00b6 To update the COVID Tracking Project data: python data / load_covid_tracking_project_data . py This will create a file covid-tracking-project-data.csv in the data directory. This adds data from each of the US states and territories, as well as for the whole of the United States. The following fields are saved: date positive negative pending hospitalizedCurrently hospitalizedCumulative inIcuCurrently inIcuCumulative onVentilatorCurrently onVentilatorCumulative recovered hash dateChecked death hospitalized total totalTestResults posNeg fips hospitalizedIncrease negativeIncrease name day new_positives new_negatives new_tests new_death new_icu new_vent More details at: https://covidtracking.com/api The new_ variables are per-day changes in the values, in parameter.py format. 4. Demographic data scraper \u00b6 To scrape demographic data, run: python data / load_demographic_data . py"}, {"title": "Build and test in Docker \u2014 Covasim  documentation", "tags": "", "url": "./docker.html", "text": "Build and test in Docker \u00b6 The docker directory contains scripts and files related to building Covasim into a Docker container. This is intended as an environment to allow you to build and test the Docker image locally using Docker only. To test the Kubernetes version, see the .platform directory. Build the container \u00b6 On Linux, you can build one of any of the following ways: make build docker-compose build On Windows, the recommended way is to run: docker-compose build Run the latest build from CI \u00b6 On Linux you can run: make pull - run On Windows, you can run: docker - compose pull covasim docker - compose up - d On both platforms, Covasim will be available at http://localhost:8000 ."}, {"title": "Covasim docs \u2014 Covasim  documentation", "tags": "", "url": "./docs.html", "text": "Covasim docs \u00b6 This folder includes code for building the docs. Users are unlikely to need to do this themselves. To build the docs, follow these steps: Make sure dependencies are installed: > pip install - r requirements . txt Make the documents; there are many build options, but most convenient is: > make dirhtml The built documents will be in ./_build/html ."}, {"title": "Usage examples \u2014 Covasim  documentation", "tags": "", "url": "./examples.html", "text": "The module should then be importable via import covasim . Usage examples \u00b6 There are several examples in the examples directory. These can be run as follows: python examples/simple.py This example creates a figure using default parameter values. python examples/run_sim.py This shows a slightly more detailed example, including creating an intervention and saving to disk. python examples/run_scenarios.py"}, {"title": "Index \u2014 Covasim  documentation", "tags": "", "url": "./genindex.html", "text": "Index A | B | C | D | F | G | I | K | L | M | N | P | Q | R | S | T | U | V A add_contacts() (covasim.base.BasePeople method) all_states (covasim.defaults.PeopleKeys attribute) animate_people() (in module covasim.webapp.cova_app) apply() (covasim.interventions.change_beta method) (covasim.interventions.contact_tracing method) (covasim.interventions.dynamic_pars method) (covasim.interventions.Intervention method) (covasim.interventions.sequence method) (covasim.interventions.test_num method) (covasim.interventions.test_prob method) B BasePeople (class in covasim.base) BaseSim (class in covasim.base) binomial_arr() (in module covasim.utils) binomial_filter() (in module covasim.utils) C change_beta (class in covasim.interventions) check_critical() (covasim.people.People method) check_death() (covasim.people.People method) check_diagnosed() (covasim.people.People method) check_inds() (covasim.people.People method) check_infectious() (covasim.people.People method) check_quar() (covasim.people.People method) check_recovery() (covasim.people.People method) check_sciris() (in module covasim.requirements) check_scirisweb() (in module covasim.requirements) check_severe() (covasim.people.People method) check_symptomatic() (covasim.people.People method) check_synthpops() (in module covasim.requirements) check_tested() (covasim.people.People method) check_version() (in module covasim.misc) choose() (in module covasim.utils) choose_r() (in module covasim.utils) choose_w() (in module covasim.utils) compute_doubling() (covasim.sim.Sim method) compute_gen_time() (covasim.sim.Sim method) compute_r_eff() (covasim.sim.Sim method) contact_tracing (class in covasim.interventions) contacts (covasim.defaults.PeopleKeys attribute) count() (covasim.base.BasePeople method) covasim.base module covasim.cruise_ship.model module covasim.cruise_ship.parameters module covasim.cruise_ship.test_cruise_sim module covasim.data module covasim.data.country_age_distributions module covasim.data.loaders module covasim.defaults module covasim.interventions module covasim.misc module covasim.parameters module covasim.people module covasim.population module covasim.requirements module covasim.run module covasim.sim module covasim.utils module covasim.webapp.cova_app module D daily_tests (covasim.interventions.test_num attribute) dates (covasim.defaults.PeopleKeys attribute) datevec() (covasim.base.BaseSim property) defined() (in module covasim.utils) durs (covasim.defaults.PeopleKeys attribute) dynamic_pars (class in covasim.interventions) F false() (covasim.base.BasePeople method) (in module covasim.utils) finalize() (covasim.sim.Sim method) fixaxis() (in module covasim.misc) from_people() (covasim.base.BasePeople method) G get() (covasim.base.BasePeople method) get_age_distribution() (in module covasim.data.loaders) get_age_sex() (in module covasim.cruise_ship.parameters) get_country_age_distributions() (in module covasim.data.country_age_distributions) get_defaults() (in module covasim.webapp.cova_app) get_doubling_time() (in module covasim.misc) get_gnatt() (in module covasim.webapp.cova_app) get_individual_states() (in module covasim.webapp.cova_app) get_prognoses() (in module covasim.parameters) get_version() (in module covasim.webapp.cova_app) git_info() (in module covasim.misc) I idefined() (in module covasim.utils) idefinedi() (in module covasim.utils) ifalse() (in module covasim.utils) ifalsei() (in module covasim.utils) index() (covasim.base.BasePeople method) inds2dates() (covasim.base.BaseSim method) infect() (covasim.people.People method) infected (covasim.base.Person attribute) infected_by (covasim.base.Person attribute) init_contacts() (covasim.base.BasePeople method) init_people() (covasim.cruise_ship.model.Sim method) (covasim.sim.Sim method) init_results() (covasim.cruise_ship.model.Sim method) (covasim.sim.Sim method) initialize() (covasim.people.People method) (covasim.sim.Sim method) Intervention (class in covasim.interventions) itrue() (in module covasim.utils) itruei() (in module covasim.utils) K keys() (covasim.base.BasePeople method) L layer_keys() (covasim.base.BasePeople method) (covasim.base.BaseSim method) likelihood() (covasim.cruise_ship.model.Sim method) (covasim.sim.Sim method) load() (covasim.base.BaseSim static method) (covasim.run.Scenarios static method) load_data() (covasim.sim.Sim method) (in module covasim.cruise_ship.parameters) (in module covasim.parameters) load_population() (covasim.sim.Sim method) M make_edgelist() (covasim.base.BasePeople method) make_hybrid_contacts() (in module covasim.population) make_metapars() (in module covasim.run) make_microstructured_contacts() (in module covasim.population) make_pars() (in module covasim.cruise_ship.parameters) (in module covasim.parameters) make_people() (in module covasim.population) make_random_contacts() (in module covasim.population) make_randpop() (in module covasim.population) make_susceptible() (covasim.people.People method) make_synthpop() (in module covasim.population) map_contact_tracing() (in module covasim.webapp.cova_app) map_school_closures() (in module covasim.webapp.cova_app) map_social_distance() (in module covasim.webapp.cova_app) map_symptomatic_testing() (in module covasim.webapp.cova_app) module covasim.base covasim.cruise_ship.model covasim.cruise_ship.parameters covasim.cruise_ship.test_cruise_sim covasim.data covasim.data.country_age_distributions covasim.data.loaders covasim.defaults covasim.interventions covasim.misc covasim.parameters covasim.people covasim.population covasim.requirements covasim.run covasim.sim covasim.utils covasim.webapp.cova_app multi_run() (in module covasim.run) multinomial() (in module covasim.utils) N n() (covasim.base.BaseSim property) npts() (covasim.base.BaseSim property) (covasim.base.Result property) P ParsObj (class in covasim.base) People (class in covasim.people) PeopleKeys (class in covasim.defaults) Person (class in covasim.base) (class in covasim.cruise_ship.model) person (covasim.defaults.PeopleKeys attribute) person() (covasim.base.BasePeople method) plot() (covasim.base.TransTree method) (covasim.cruise_ship.model.Sim method) (covasim.interventions.change_beta method) (covasim.interventions.Intervention method) (covasim.run.Scenarios method) (covasim.sim.Sim method) plot_people() (covasim.cruise_ship.model.Sim method) (in module covasim.webapp.cova_app) plot_result() (covasim.sim.Sim method) poisson() (in module covasim.utils) poisson_test() (in module covasim.misc) progressbar() (in module covasim.misc) Q quarantine() (covasim.people.People method) R remove_duplicates() (covasim.base.BasePeople static method) remove_dynamic_contacts() (covasim.base.BasePeople method) rescale() (covasim.sim.Sim method) resize() (covasim.base.BasePeople method) Result (class in covasim.base) result_keys() (covasim.base.BaseSim method) (covasim.run.Scenarios method) results (covasim.interventions.Intervention attribute) run() (covasim.cruise_ship.model.Sim method) (covasim.run.Scenarios method) (covasim.sim.Sim method) run_sim() (in module covasim.webapp.cova_app) S sample() (in module covasim.utils) save() (covasim.base.BaseSim method) (covasim.run.Scenarios method) save_population() (covasim.sim.Sim method) Scenarios (class in covasim.run) sequence (class in covasim.interventions) set() (covasim.base.BasePeople method) set_betas() (covasim.people.People method) set_contacts() (in module covasim.parameters) set_metadata() (covasim.sim.Sim method) set_prognoses() (covasim.people.People method) set_seed() (covasim.base.BaseSim method) (in module covasim.utils) shrink() (covasim.base.BaseSim method) Sim (class in covasim.cruise_ship.model) (class in covasim.sim) single_run() (in module covasim.run) states (covasim.defaults.PeopleKeys attribute) step() (covasim.sim.Sim method) summary_stats() (covasim.cruise_ship.model.Sim method) (covasim.sim.Sim method) T test() (covasim.people.People method) test_num (class in covasim.interventions) test_parsobj() (in module covasim.cruise_ship.test_cruise_sim) test_prob (class in covasim.interventions) test_sim() (in module covasim.cruise_ship.test_cruise_sim) to_arr() (covasim.base.BasePeople method) to_df() (covasim.base.BasePeople method) to_excel() (covasim.base.BaseSim method) (covasim.run.Scenarios method) to_json() (covasim.base.BaseSim method) (covasim.interventions.Intervention method) (covasim.run.Scenarios method) to_people() (covasim.base.BasePeople method) trace() (covasim.people.People method) TransTree (class in covasim.base) true() (covasim.base.BasePeople method) (in module covasim.utils) tvec() (covasim.base.BaseSim property) U update_contacts() (covasim.people.People method) update_pars() (covasim.base.ParsObj method) (covasim.sim.Sim method) update_states() (covasim.people.People method) upload_file() (in module covasim.webapp.cova_app) upload_pars() (in module covasim.webapp.cova_app) V validate() (covasim.base.BasePeople method) validate_pars() (covasim.sim.Sim method)"}, {"title": "Welcome to Covasim \u2014 Covasim  documentation", "tags": "", "url": "./index.html", "text": "Welcome to Covasim \u00b6 COVID-10 Agent-based Simulator (Covasim) is a stochastic agent-based simulator designed to be used for COVID-19 (novel coronavirus, SARS-CoV-2) epidemic analyses. These include projections of indicators such as numbers of infections and peak hospital demand. Covasim can also be used to explore the potential impact of different interventions. Installation and setup Run Covasim in the web UI Build and test in Docker Using Covasim Usage examples Data scrapers Run parameter sweeps Covasim docs Run tests Package reference covasim.cruise_ship package covasim.data package covasim.webapp package Parameters Contributing to Covasim Contributor covenant code of conduct"}, {"title": "Installation and setup \u2014 Covasim  documentation", "tags": "", "url": "./installation.html", "text": "Installation and setup \u00b6 The following section describes how to install Covasim and run the web application. Requirements \u00b6 Python >=3.6 (64-bit). (Note: Python 2 is not supported.) We also recommend, but do not require, using Python virtual environments. For more information, see documentation for venv or Anaconda . Quick start guide \u00b6 Install with pip install covasim . If everything is working, the following Python commands should bring up a plot: import covasim as cv sim = cv . Sim () sim . run () sim . plot () Detailed installation instructions \u00b6 Clone a copy of the repository. If you intend to make changes to the code, we recommend that you fork it first. (Optional) Create and activate a virtual environment. Navigate to the root of the repository and install the Covasim Python package using one of the following options: To install with web app support (recommended): python setup . py develop To install as a standalone Python model without webapp support: python setup . py develop nowebapp To install Covasim and optional dependencies (be aware this may fail since it relies on private packages), enter: python setup . py develop full Run Covasim in the web UI Quick local testing Deployment Requirements Set up nginx Run gunicorn Docker Build and test in Docker Build the container Run the latest build from CI"}, {"title": "Package reference \u2014 Covasim  documentation", "tags": "", "url": "./modules.html", "text": "Package reference \u00b6 Contents Subpackages covasim submodules covasim.base module covasim.defaults module covasim.interventions module covasim.misc module covasim.parameters module covasim.people module covasim.population module covasim.requirements module covasim.run module covasim.sim module covasim.utils module Subpackages \u00b6 covasim.cruise_ship package Submodules covasim.cruise_ship.model module covasim.cruise_ship.parameters module covasim.cruise_ship.test_cruise_sim module covasim.data package Submodules covasim.data.country_age_distributions module covasim.data.loaders module Module contents covasim.webapp package Submodules covasim.webapp.cova_app module covasim submodules \u00b6 covasim.base module \u00b6 Base classes for Covasim. class covasim.base. ParsObj ( pars ) \u00b6 Bases: sciris.sc_utils.prettyobj A class based around performing operations on a self.pars dict. update_pars ( pars = None , create = False ) \u00b6 Update internal dict with new pars. Parameters pars ( dict ) \u2013 the parameters to update (if None, do nothing) create ( bool ) \u2013 if create is False, then raise a KeyError if the key does not already exist class covasim.base. Result ( name = None , values = None , npts = None , scale = 'dynamic' , color = None ) \u00b6 Bases: object Stores a single result \u2013 by default, acts like an array. Parameters name ( str ) \u2013 name of this result, e.g. new_infections values ( array ) \u2013 array of values corresponding to this result npts ( int ) \u2013 if values is None, precreate it to be of this length scale ( str ) \u2013 whether or not the value scales by population size; options are \u201cdynamic\u201d, \u201cstatic\u201d, or False color ( str or array ) \u2013 default color for plotting (hex or RGB notation) Example import covasim as cv r1 = cv . Result ( name = 'test1' , npts = 10 ) r1 [: 5 ] = 20 print ( r2 . values ) r2 = cv . Result ( name = 'test2' , values = range ( 10 )) print ( r2 ) property npts \u00b6 class covasim.base. BaseSim ( * args , ** kwargs ) \u00b6 Bases: covasim.base.ParsObj The BaseSim class handles the running of the simulation: the number of people, number of time points, and the parameters of the simulation. set_seed ( seed = - 1 ) \u00b6 Set the seed for the random number stream from the stored or supplied value Parameters seed ( None or int ) \u2013 if no argument, use current seed; if None, randomize; otherwise, use and store supplied seed Returns None property n \u00b6 Count the number of people \u2013 if it fails, assume none property npts \u00b6 Count the number of time points property tvec \u00b6 Create a time vector property datevec \u00b6 Create a vector of dates Returns Array of datetime instances containing the date associated with each simulation time step inds2dates ( inds , dateformat = None ) \u00b6 Convert a set of indices to a set of dates result_keys ( ) \u00b6 Get the actual results objects, not other things stored in sim.results layer_keys ( ) \u00b6 Get the available contact keys \u2013 set by beta_layer rather than contacts since only the former is required to_json ( filename = None , keys = None , tostring = True , indent = 2 , verbose = False , * args , ** kwargs ) \u00b6 Export results as JSON. Parameters filename ( str ) \u2013 if None, return string; else, write to file keys ( str or list ) \u2013 attributes to write to json (default: results, parameters, and summary) tostring ( bool ) \u2013 if not writing to file, whether to write to string (alternative is sanitized dictionary) indent ( int ) \u2013 if writing to file, how many indents to use per nested level verbose ( bool ) \u2013 detail to print args ( list ) \u2013 passed to savejson() kwargs ( dict ) \u2013 passed to savejson() Returns A unicode string containing a JSON representation of the results, or writes the JSON file to disk Examples string = sim.to_json() sim.to_json(\u2018results.json\u2019) sim.to_json(\u2018summary.json\u2019, keys=\u2019summary\u2019) to_excel ( filename = None ) \u00b6 Export results as XLSX Parameters filename ( str ) \u2013 if None, return string; else, write to file Returns An sc.Spreadsheet with an Excel file, or writes the file to disk shrink ( skip_attrs = None , in_place = True ) \u00b6 \u201cShrinks\u201d the simulation by removing the people, and returns a copy of the \u201cshrunken\u201d simulation. Used to reduce the memory required for saved files. Parameters skip_attrs ( list ) \u2013 a list of attributes to skip in order to perform the shrinking; default \u201cpeople\u201d Returns a Sim object with the listed attributes removed Return type shrunken_sim ( Sim ) save ( filename = None , keep_population = False , skip_attrs = None , ** kwargs ) \u00b6 Save to disk as a gzipped pickle. Parameters filename ( str or None ) \u2013 the name or path of the file to save to; if None, uses stored kwargs \u2013 passed to makefilepath() Returns the validated absolute path to the saved file Return type filename (str) Example sim . save () # Saves to a .sim file with the date and time of creation by default static load ( filename , ** kwargs ) \u00b6 Load from disk from a gzipped pickle. Parameters filename ( str ) \u2013 the name or path of the file to save to keywords \u2013 passed to makefilepath() Returns the loaded simulation object Return type sim ( Sim ) Example sim = cv . Sim . load ( 'my-simulation.sim' ) class covasim.base. BasePeople ( pars = None , pop_size = None , * args , ** kwargs ) \u00b6 Bases: sciris.sc_utils.prettyobj A class to handle all the boilerplate for people \u2013 note that everything interesting happens in the People class. set ( key , value , die = True ) \u00b6 Ensure sizes and dtypes match get ( key ) \u00b6 Convenience method true ( key ) \u00b6 Return indices matching the condition false ( key ) \u00b6 Return indices not matching the condition count ( key ) \u00b6 Count the number of people for a given key keys ( which = None ) \u00b6 Returns the name of the states layer_keys ( ) \u00b6 Get the available contact keys \u2013 set by beta_layer rather than contacts since only the former is required index ( ) \u00b6 The indices of the array validate ( die = True , verbose = False ) \u00b6 resize ( pop_size = None , keys = None ) \u00b6 Resize arrays if any mismatches are found to_df ( ) \u00b6 Convert to a Pandas dataframe to_arr ( ) \u00b6 Return as numpy array person ( ind ) \u00b6 Method to create person from the people to_people ( ) \u00b6 Return all people as a list from_people ( people , resize = True ) \u00b6 Convert a list of people back into a People object init_contacts ( reset = False ) \u00b6 Initialize the contacts dataframe with the correct columns and data types add_contacts ( contacts , key = None , beta = None ) \u00b6 Add new contacts to the array make_edgelist ( contacts ) \u00b6 Parse a list of people with a list of contacts per person and turn it into an edge list. static remove_duplicates ( df ) \u00b6 Sort the dataframe and remove duplicates remove_dynamic_contacts ( dynamic_keys = 'c' ) \u00b6 Remove all contacts labeled as dynamic class covasim.base. Person ( pars = None , uid = None , age = - 1 , sex = - 1 , contacts = None ) \u00b6 Bases: sciris.sc_utils.prettyobj Class for a single person. Note: this is largely deprecated since sim.people is now based on arrays rather than being a list of people. infected = None \u00b6 Record the UIDs of all people this person infected infected_by = None \u00b6 Store the UID of the person who caused the infection. If None but person is infected, then it was an externally seeded infection class covasim.base. TransTree ( pop_size = None , sources = None , targets = None ) \u00b6 Bases: sciris.sc_utils.prettyobj A class for holding a transmission tree. Sources and targets are both lists of the same length as the population size. Sources has one entry for people who have been infected, zero for those who haven\u2019t. Targets is a list of lists, with the length of the list being the number of people that person infected. Parameters sources ( list ) \u2013 the person who infected this person targets ( list ) \u2013 the people this person infected plot ( ) \u00b6 covasim.defaults module \u00b6 Set the defaults across each of the different files. class covasim.defaults. PeopleKeys \u00b6 Bases: sciris.sc_utils.prettyobj For storing all the keys relating to a person and people person = ['uid', 'age', 'sex', 'symp_prob', 'severe_prob', 'crit_prob', 'death_prob', 'rel_trans', 'rel_sus'] \u00b6 states = ['susceptible', 'exposed', 'infectious', 'symptomatic', 'severe', 'critical', 'tested', 'diagnosed', 'recovered', 'dead', 'known_contact', 'quarantined'] \u00b6 dates = ['date_susceptible', 'date_exposed', 'date_infectious', 'date_symptomatic', 'date_severe', 'date_critical', 'date_tested', 'date_diagnosed', 'date_recovered', 'date_dead', 'date_known_contact', 'date_quarantined', 'date_end_quarantine'] \u00b6 durs = ['dur_exp2inf', 'dur_inf2sym', 'dur_sym2sev', 'dur_sev2crit', 'dur_disease'] \u00b6 all_states = ['uid', 'age', 'sex', 'symp_prob', 'severe_prob', 'crit_prob', 'death_prob', 'rel_trans', 'rel_sus', 'susceptible', 'exposed', 'infectious', 'symptomatic', 'severe', 'critical', 'tested', 'diagnosed', 'recovered', 'dead', 'known_contact', 'quarantined', 'date_susceptible', 'date_exposed', 'date_infectious', 'date_symptomatic', 'date_severe', 'date_critical', 'date_tested', 'date_diagnosed', 'date_recovered', 'date_dead', 'date_known_contact', 'date_quarantined', 'date_end_quarantine', 'dur_exp2inf', 'dur_inf2sym', 'dur_sym2sev', 'dur_sev2crit', 'dur_disease'] \u00b6 contacts = {'beta': <class 'numpy.float32'>, 'layer': None, 'p1': <class 'numpy.int32'>, 'p2': <class 'numpy.int32'>} \u00b6 covasim.interventions module \u00b6 class covasim.interventions. Intervention \u00b6 Bases: object Abstract class for interventions results = None \u00b6 All interventions are guaranteed to have results, so Sim can safely iterate over this dict apply ( sim ) \u00b6 Apply intervention Function signature matches existing intervention definition This method gets called at each timestep and must be implemented by derived classes Parameters self \u2013 sim \u2013 The Sim instance Returns None plot ( sim , ax ) \u00b6 Call function during plotting This can be used to do things like add vertical lines on days when interventions take place Parameters sim \u2013 the Sim instance ax \u2013 the axis instance Returns None to_json ( ) \u00b6 Return JSON-compatible representation Custom classes can\u2019t be directly represented in JSON. This method is a one-way export to produce a JSON-compatible representation of the intervention. In the first instance, the object dict will be returned. However, if an intervention itself contains non-standard variables as attributes, then its to_json method will need to handle those Returns JSON-serializable representation (typically a dict, but could be anything else) class covasim.interventions. dynamic_pars ( pars ) \u00b6 Bases: covasim.interventions.Intervention A generic intervention that modifies a set of parameters at specified points in time. The intervention takes a single argument, pars, which is a dictionary of which parameters to change, with following structure: keys are the parameters to change, then subkeys \u2018days\u2019 and \u2018vals\u2019 are either a scalar or list of when the change(s) should take effect and what the new value should be, respectively. Parameters pars ( dict ) \u2013 described above Examples interv = cv . dynamic_pars ({ 'diag_factor' :{ 'days' : 30 , 'vals' : 0.5 }, 'cont_factor' :{ 'days' : 30 , 'vals' : 0.5 }}) # Starting day 30, make diagnosed people and people with contacts half as likely to transmit interv = cv . dynamic_pars ({ 'beta' :{ 'days' :[ 14 , 28 ], 'vals' :[ 0.005 , 0.015 ]}}) # On day 14, change beta to 0.005, and on day 28 change it back to 0.015 apply ( sim ) \u00b6 Loop over the parameters, and then loop over the days, applying them if any are found class covasim.interventions. sequence ( days , interventions ) \u00b6 Bases: covasim.interventions.Intervention This is an example of a meta-intervention which switches between a sequence of interventions. Parameters days ( list ) \u2013 the days on which to apply each intervention interventions ( list ) \u2013 the interventions to apply on those days WARNING \u2013 Will take first intervation after sum(days) days has ellapsed! Example interv = cv . sequence ( days = [ 10 , 51 ], interventions = [ cv . test_historical ( npts , n_tests = [ 100 ] * npts , n_positive = [ 1 ] * npts ), cv . test_prob ( npts , symptomatic_prob = 0.2 , asymptomatic_prob = 0.002 ), ]) apply ( sim : covasim.sim.Sim ) \u00b6 Apply intervention Function signature matches existing intervention definition This method gets called at each timestep and must be implemented by derived classes Parameters self \u2013 sim \u2013 The Sim instance Returns None class covasim.interventions. change_beta ( days , changes , layers = None ) \u00b6 Bases: covasim.interventions.Intervention The most basic intervention \u2013 change beta by a certain amount. Parameters days ( int or array ) \u2013 the day or array of days to apply the interventions changes ( float or array ) \u2013 the changes in beta (1 = no change, 0 = no transmission) layers ( str or array ) \u2013 the layers in which to change beta Examples interv = cv . change_beta ( 25 , 0.3 ) # On day 25, reduce overall beta by 70% to 0.3 interv = cv . change_beta ([ 14 , 28 ], [ 0.7 , 1 ], layers = 's' ) # On day 14, reduce beta by 30%, and on day 28, return to 1 for schools apply ( sim ) \u00b6 Apply intervention Function signature matches existing intervention definition This method gets called at each timestep and must be implemented by derived classes Parameters self \u2013 sim \u2013 The Sim instance Returns None plot ( sim , ax ) \u00b6 Plot vertical lines for when changes in beta class covasim.interventions. test_num ( daily_tests , sympt_test = 100.0 , quar_test = 1.0 , sensitivity = 1.0 , test_delay = 0 , loss_prob = 0 ) \u00b6 Bases: covasim.interventions.Intervention Test a fixed number of people per day. Example interv = cv . test_num ( daily_tests = [ 0.10 * n_people ] * npts ) Returns Intervention daily_tests = None \u00b6 Should be a list of length matching time apply ( sim ) \u00b6 Apply intervention Function signature matches existing intervention definition This method gets called at each timestep and must be implemented by derived classes Parameters self \u2013 sim \u2013 The Sim instance Returns None class covasim.interventions. test_prob ( symp_prob = 0 , asymp_prob = 0 , asymp_quar_prob = None , symp_quar_prob = None , test_sensitivity = 1.0 , loss_prob = 0.0 , test_delay = 1 , start_day = 0 ) \u00b6 Bases: covasim.interventions.Intervention Test as many people as required based on test probability. Probabilities are OR together, so choose wisely. Parameters symptomatic_prob ( float ) \u2013 Probability of testing a symptomatic person asymptomatic_prob ( float ) \u2013 Probability of testing an asymptomatic person test_sensitivity ( float ) \u2013 Probability of a true positive loss_prob ( float ) \u2013 Probability of loss to follow-up test_delay ( int ) \u2013 How long testing takes start_day ( int ) \u2013 When to start the intervention symptomatic_prob \u2013 Probability of testing a symptomatic person asymptomatic_prob \u2013 Probability of testing an asymptomatic person test_sensitivity \u2013 Probability of a true positive loss_prob \u2013 Probability of loss to follow-up test_delay \u2013 How long testing takes start_day \u2013 When to start the intervention Example interv = cv . test_prob ( symptomatic_prob = 0.1 , asymptomatic_prob = 0.01 ) # Test 10% of symptomatics and 1% of asymptomatics interv = cv . test_prob ( symp_quar_prob = 0.4 ) # Test 40% of those in quarantine with symptoms Returns Intervention apply ( sim ) \u00b6 Perform testing class covasim.interventions. contact_tracing ( trace_probs , trace_time , start_day = 0 , contact_reduction = None ) \u00b6 Bases: covasim.interventions.Intervention Contact tracing of positives apply ( sim ) \u00b6 Apply intervention Function signature matches existing intervention definition This method gets called at each timestep and must be implemented by derived classes Parameters self \u2013 sim \u2013 The Sim instance Returns None covasim.misc module \u00b6 Miscellaneous functions that do not belong anywhere else covasim.misc. check_version ( expected , die = False , verbose = True , ** kwargs ) \u00b6 Get current git information and optionally write it to disk. Parameters expected ( str ) \u2013 expected version information die ( bool ) \u2013 whether or not to raise an exception if the check fails covasim.misc. git_info ( filename = None , check = False , old_info = None , die = False , verbose = True , ** kwargs ) \u00b6 Get current git information and optionally write it to disk. Parameters filename ( str ) \u2013 name of the file to write to or read from check ( bool ) \u2013 whether or not to compare two git versions old_info ( dict ) \u2013 dictionary of information to check against die ( bool ) \u2013 whether or not to raise an exception if the check fails Example cv.git_info(\u2018covasim_version.json\u2019) # Writes to disk cv.git_info(\u2018covasim_version.json\u2019, check=True) # Checks that current version matches saved file covasim.misc. fixaxis ( sim , useSI = True , boxoff = False ) \u00b6 Make the plotting more consistent \u2013 add a legend and ensure the axes start at 0 covasim.misc. progressbar ( i , maxiters , label = '' , length = 30 , empty = '\u2014' , full = '\u2022' , newline = False ) \u00b6 Call in a loop to create terminal progress bar. Parameters i ( int ) \u2013 current iteration maxiters ( int ) \u2013 maximum number of iterations label ( str ) \u2013 initial label to print length ( int ) \u2013 length of progress bar empty ( str ) \u2013 character for empty steps full ( str ) \u2013 character for empty steps Example import pylab as pl for i in range ( 100 ): progressbar ( i + 1 , 100 ) pl . pause ( 0.05 ) Adapted from example by Greenstick ( https://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console ) covasim.misc. get_doubling_time ( sim , series = None , interval = None , start_day = None , end_day = None , moving_window = None , exp_approx = False , max_doubling_time = 100 , eps = 0.001 , verbose = None ) \u00b6 Method to calculate doubling time. Examples get_doubling_time ( sim , interval = [ 3 , 30 ]) # returns the doubling time over the given interval (single float) get_doubling_time ( sim , interval = [ 3 , 30 ], moving_window = 3 ) # returns doubling times calculated over moving windows (array) covasim.misc. poisson_test ( count1 , count2 , exposure1 = 1 , exposure2 = 1 , ratio_null = 1 , method = 'score' , alternative = '2-sided' ) \u00b6 test for ratio of two sample Poisson intensities If the two Poisson rates are g1 and g2, then the Null hypothesis is H0: g1 / g2 = ratio_null against one of the following alternatives H1_2-sided: g1 / g2 != ratio_null H1_larger: g1 / g2 > ratio_null H1_smaller: g1 / g2 < ratio_null Parameters count1 ( int ) \u2013 Number of events in first sample exposure1 ( float ) \u2013 Total exposure (time * subjects) in first sample count2 ( int ) \u2013 Number of events in first sample exposure2 ( float ) \u2013 Total exposure (time * subjects) in first sample ratio ( float ) \u2013 ratio of the two Poisson rates under the Null hypothesis. Default is 1. method ( string ) \u2013 Method for the test statistic and the p-value. Defaults to \u2018score\u2019 . Current Methods are based on Gu et. al 2008 Implemented are \u2018wald\u2019, \u2018score\u2019 and \u2018sqrt\u2019 based asymptotic normal distribution, and the exact conditional test \u2018exact-cond\u2019, and its mid-point version \u2018cond-midp\u2019, see Notes alternative ( string ) \u2013 The alternative hypothesis, H1, has to be one of the following \u2019two-sided\u2019: H1: ratio of rates is not equal to ratio_null (default) \u2018larger\u2019 : H1: ratio of rates is larger than ratio_null \u2018smaller\u2019 : H1: ratio of rates is smaller than ratio_null Returns pvalue two-sided # stat not yet #results ( Results instance ) # The resulting test statistics and p-values are available as attributes. Notes \u2018wald\u2019: method W1A, wald test, variance based on separate estimates \u2018score\u2019: method W2A, score test, variance based on estimate under Null \u2018wald-log\u2019: W3A \u2018score-log\u2019 W4A \u2018sqrt\u2019: W5A, based on variance stabilizing square root transformation \u2018exact-cond\u2019: exact conditional test based on binomial distribution \u2018cond-midp\u2019: midpoint-pvalue of exact conditional test The latter two are only verified for one-sided example. References Gu, Ng, Tang, Schucany 2008: Testing the Ratio of Two Poisson Rates, Biometrical Journal 50 (2008) 2, 2008 covasim.parameters module \u00b6 Set the parameters for Covasim. covasim.parameters. make_pars ( set_prognoses = False , prog_by_age = True , use_layers = False , ** kwargs ) \u00b6 Set parameters for the simulation. Parameters Set_prognoses ( bool ) \u2013 whether or not to create prognoses (else, added when the population is created) prog_by_age ( bool ) \u2013 whether or not to use age-based severity, mortality etc. use_layers ( bool ) \u2013 whether or not to use household, school, etc. contact layers Returns the parameters of the simulation Return type pars (dict) covasim.parameters. set_contacts ( pars ) \u00b6 Small helper function to set numbers of contacts and beta based on whether or not to use layers. Typically not called by the user. Parameters pars ( dict ) \u2013 the parameters dictionary covasim.parameters. get_prognoses ( by_age = True ) \u00b6 Return the default parameter values for prognoses The prognosis probabilities are conditional given the previous disease state. Parameters by_age ( bool ) \u2013 whether or not to use age-specific values Returns the dictionary of prognosis probabilities Return type prog_pars (dict) covasim.parameters. load_data ( filename , columns = None , calculate = True , verbose = True , ** kwargs ) \u00b6 Load data for comparing to the model output. Parameters filename ( str ) \u2013 the name of the file to load (either Excel or CSV) columns ( list ) \u2013 list of column names (otherwise, load all) calculate ( bool ) \u2013 whether or not to calculate cumulative values from daily counts kwargs ( dict ) \u2013 passed to pd.read_excel() Returns pandas dataframe of the loaded data Return type data (dataframe) covasim.people module \u00b6 Defines the Person class and functions associated with making people. class covasim.people. People ( pars = None , pop_size = None , ** kwargs ) \u00b6 Bases: covasim.base.BasePeople A class to perform all the operations on the people. initialize ( pars = None , dynamic_keys = None ) \u00b6 Perform initializations set_prognoses ( pars = None ) \u00b6 Set the prognoses for each person based on age set_betas ( pars = None ) \u00b6 Set betas for each layer update_states ( t ) \u00b6 Perform all state updates update_contacts ( dynamic_keys = 'c' ) \u00b6 Set dynamic contacts, by default, community (\u2018c\u2019) make_susceptible ( inds ) \u00b6 Make person susceptible. This is used during dynamic resampling check_inds ( current , date , filter_inds = None ) \u00b6 Return indices for which the current state is false nad which meet the date criterion check_infectious ( ) \u00b6 Check if they become infectious check_symptomatic ( ) \u00b6 Check for new progressions to symptomatic check_severe ( ) \u00b6 Check for new progressions to severe check_critical ( ) \u00b6 Check for new progressions to critical check_recovery ( ) \u00b6 Check for recovery check_death ( ) \u00b6 Check whether or not this person died on this timestep check_tested ( ) \u00b6 Check for new tests check_diagnosed ( ) \u00b6 Check for new diagnoses check_quar ( ) \u00b6 Check for whether someone has been contacted by a positive infect ( inds , bed_max = None , verbose = True ) \u00b6 Infect people and determine their eventual outcomes. Every infected person can infect other people, regardless of whether they develop symptoms Infected people that develop symptoms are disaggregated into mild vs. severe (=requires hospitalization) vs. critical (=requires ICU) Every asymptomatic, mildly symptomatic, and severely symptomatic person recovers Critical cases either recover or die Parameters inds ( array ) \u2013 array of people to infect t ( int ) \u2013 current timestep bed_max ( bool ) \u2013 whether or not there is a bed available for this person Returns number of people infected Return type count (int) test ( inds , test_sensitivity = 1.0 , loss_prob = 0.0 , test_delay = 0 ) \u00b6 Method to test people Parameters inds \u2013 indices of who to test test_sensitivity ( float ) \u2013 probability of a true positive loss_prob ( float ) \u2013 probability of loss to follow-up test_delay ( int ) \u2013 number of days before test results are ready Returns Whether or not this person tested positive quarantine ( inds ) \u00b6 Quarantine selected people starting on the current day. If a person is already quarantined, this will extend their quarantine. :param inds: indices of who to quarantine :type inds: array trace ( inds , trace_probs , trace_time ) \u00b6 Trace the contacts of the people provided :param inds: indices of whose contacts to trace :type inds: array :param trace_probs: probability of being able to trace people at each contact layer - should have the same keys as contacts :type trace_probs: dict :param trace_time: # days it\u2019ll take to trace people at each contact layer - should have the same keys as contacts :type trace_time: dict covasim.population module \u00b6 Defines functions for making the population. covasim.population. make_people ( sim , verbose = None , die = True , reset = False ) \u00b6 Make the actual people for the simulation. Parameters sim ( Sim ) \u2013 the simulation object verbose ( bool ) \u2013 level of detail to print id_len ( int ) \u2013 length of ID for each person (default: calculate required length based on the number of people) die ( bool ) \u2013 whether or not to fail if synthetic populations are requested but not available reset ( bool ) \u2013 whether to force population creation even if self.popdict exists Returns None. covasim.population. make_randpop ( sim , age_data = None , sex_ratio = 0.5 , microstructure = False ) \u00b6 Make a random population, without contacts covasim.population. make_random_contacts ( pop_size , contacts ) \u00b6 Make random static contacts covasim.population. make_microstructured_contacts ( pop_size , contacts ) \u00b6 Create microstructured contacts \u2013 i.e. households, schools, etc. covasim.population. make_hybrid_contacts ( pop_size , ages , contacts , school_ages = None , work_ages = None ) \u00b6 Create \u201chybrid\u201d contacts \u2013 microstructured contacts for households and random contacts for schools and workplaces, both of which have extremely basic age structure. A combination of both make_random_contacts() and make_microstructured_contacts(). covasim.population. make_synthpop ( sim ) \u00b6 Make a population using synthpops, including contacts covasim.requirements module \u00b6 Check that correct versions of each library are installed, and print warnings or errors if not. covasim.requirements. check_sciris ( ) \u00b6 Check that Sciris is available and the right version covasim.requirements. check_scirisweb ( die = False ) \u00b6 Check that Scirisweb is available and the right version covasim.requirements. check_synthpops ( verbose = False , die = False ) \u00b6 Check whether synthpops is available covasim.run module \u00b6 Functions for running multiple Covasim runs. covasim.run. make_metapars ( ) \u00b6 Create default metaparameters for a Scenarios run class covasim.run. Scenarios ( sim = None , metapars = None , scenarios = None , basepars = None , filename = None ) \u00b6 Bases: covasim.base.ParsObj Class for running multiple sets of multiple simulations \u2013 e.g., scenarios. Parameters sim ( Sim or None ) \u2013 if supplied, use a pre-created simulation as the basis for the scenarios metapars ( dict ) \u2013 meta-parameters for the run, e.g. number of runs; see make_metapars() for structure scenarios ( dict ) \u2013 a dictionary defining the scenarios; see default_scenario for structure basepars ( dict ) \u2013 a dictionary of sim parameters to be used for the basis of the scenarios (not required if sim is provided) filename ( str ) \u2013 a filename for saving (defaults to the creation date) Returns a Scenarios object Return type scens result_keys ( ) \u00b6 Attempt to retrieve the results keys from the base sim run ( debug = False , verbose = None , ** kwargs ) \u00b6 Run the actual scenarios Parameters debug ( bool ) \u2013 if True, runs a single run instead of multiple, which makes debugging easier verbose ( int ) \u2013 level of detail to print, passed to sim.run() kwargs ( dict ) \u2013 passed to multi_run() and thence to sim.run() Returns None (modifies Scenarios object in place) plot ( to_plot = None , do_save = None , fig_path = None , fig_args = None , plot_args = None , axis_args = None , fill_args = None , legend_args = None , as_dates = True , dateformat = None , interval = None , n_cols = 1 , font_size = 18 , font_family = None , grid = True , commaticks = True , do_show = True , sep_figs = False , verbose = None ) \u00b6 Plot the results \u2013 can supply arguments for both the figure and the plots. Parameters to_plot ( dict ) \u2013 Dict of results to plot; see default_scen_plots for structure do_save ( bool ) \u2013 Whether or not to save the figure fig_path ( str ) \u2013 Path to save the figure fig_args ( dict ) \u2013 Dictionary of kwargs to be passed to pl.figure() plot_args ( dict ) \u2013 Dictionary of kwargs to be passed to pl.plot() axis_args ( dict ) \u2013 Dictionary of kwargs to be passed to pl.subplots_adjust() fill_args ( dict ) \u2013 Dictionary of kwargs to be passed to pl.fill_between() legend_args ( dict ) \u2013 Dictionary of kwargs to be passed to pl.legend() as_dates ( bool ) \u2013 Whether to plot the x-axis as dates or time points dateformat ( str ) \u2013 Date string format, e.g. \u2018%B %d\u2019 interval ( int ) \u2013 Interval between tick marks n_cols ( int ) \u2013 Number of columns of subpanels to use for subplot font_size ( int ) \u2013 Size of the font font_family ( str ) \u2013 Font face grid ( bool ) \u2013 Whether or not to plot gridlines commaticks ( bool ) \u2013 Plot y-axis with commas rather than scientific notation do_show ( bool ) \u2013 Whether or not to show the figure sep_figs ( bool ) \u2013 Whether to show separate figures for different results instead of subplots verbose ( bool ) \u2013 Display a bit of extra information Returns Figure handle Return type fig to_json ( filename = None , tostring = True , indent = 2 , verbose = False , * args , ** kwargs ) \u00b6 Export results as JSON. Parameters filename ( str ) \u2013 if None, return string; else, write to file Returns A unicode string containing a JSON representation of the results, or writes the JSON file to disk to_excel ( filename = None ) \u00b6 Export results as XLSX Parameters filename ( str ) \u2013 if None, return string; else, write to file Returns An sc.Spreadsheet with an Excel file, or writes the file to disk save ( filename = None , keep_sims = True , keep_population = False , ** kwargs ) \u00b6 Save to disk as a gzipped pickle. Parameters filename ( str or None ) \u2013 the name or path of the file to save to; if None, uses stored keep_sims ( bool ) \u2013 whether or not to store the actual Sim objects in the Scenarios object keep_population ( bool ) \u2013 whether or not to store the population in the Sim objects (NB, very large) keywords \u2013 passed to makefilepath() Returns the validated absolute path to the saved file Return type filename (str) Example scens . save () # Saves to a .scens file with the date and time of creation by default static load ( filename , ** kwargs ) \u00b6 Load from disk from a gzipped pickle. Parameters filename ( str ) \u2013 the name or path of the file to save to keywords \u2013 passed to makefilepath() Returns the loaded scenarios object Return type scens ( Scenarios ) Example sim = cv . Scenarios . load ( 'my-scenarios.scens' ) covasim.run. single_run ( sim , ind = 0 , noise = 0.0 , noisepar = None , verbose = None , keep_people = False , run_args = None , sim_args = None , ** kwargs ) \u00b6 Convenience function to perform a single simulation run. Mostly used for parallelization, but can also be used directly. Parameters sim ( Sim ) \u2013 the sim instance to be run ind ( int ) \u2013 the index of this sim noise ( float ) \u2013 the amount of noise to add to each run noisepar ( string ) \u2013 the name of the parameter to add noise to verbose ( int ) \u2013 detail to print run_args ( dict ) \u2013 arguments passed to sim.run() sim_args ( dict ) \u2013 extra parameters to pass to the sim, e.g. \u2018n_infected\u2019 kwargs ( dict ) \u2013 also passed to the sim Returns a single sim object with results Return type sim ( Sim ) Example import covasim as cv sim = cv . Sim () # Create a default simulation sim = cv . single_run ( sim ) # Run it, equivalent(ish) to sim.run() covasim.run. multi_run ( sim , n_runs = 4 , noise = 0.0 , noisepar = None , iterpars = None , verbose = None , combine = False , keep_people = None , run_args = None , sim_args = None , ** kwargs ) \u00b6 For running multiple runs in parallel. Parameters sim ( Sim ) \u2013 the sim instance to be run n_runs ( int ) \u2013 the number of parallel runs noise ( float ) \u2013 the amount of noise to add to each run noisepar ( string ) \u2013 the name of the parameter to add noise to iterpars ( dict ) \u2013 any other parameters to iterate over the runs; see sc.parallelize() for syntax verbose ( int ) \u2013 detail to print combine ( bool ) \u2013 whether or not to combine all results into one sim, rather than return multiple sim objects keep_people ( bool ) \u2013 whether or not to keep the people in each sim run_args ( dict ) \u2013 arguments passed to sim.run() sim_args ( dict ) \u2013 extra parameters to pass to the sim kwargs ( dict ) \u2013 also passed to the sim Returns If combine is True, a single sim object with the combined results from each sim. Otherwise, a list of sim objects (default). Example import covasim as cv sim = cv . Sim () sims = cv . multi_run ( sim , n_runs = 6 , noise = 0.2 ) covasim.sim module \u00b6 Defines the Sim class, Covasim\u2019s core class. class covasim.sim. Sim ( pars = None , datafile = None , datacols = None , popfile = None , filename = None , label = None , ** kwargs ) \u00b6 Bases: covasim.base.BaseSim The Sim class handles the running of the simulation: the number of children, number of time points, and the parameters of the simulation. Parameters pars ( dict ) \u2013 parameters to modify from their default values datafile ( str ) \u2013 filename of (Excel) data file to load, if any datacols ( list ) \u2013 list of column names of the data file to load filename ( str ) \u2013 the filename for this simulation, if it\u2019s saved (default: creation date) update_pars ( pars = None , create = False , ** kwargs ) \u00b6 Ensure that metaparameters get used properly before being updated set_metadata ( filename , label ) \u00b6 Set the metadata for the simulation \u2013 creation time and filename load_data ( datafile = None , datacols = None , ** kwargs ) \u00b6 Load the data to calibrate against, if provided load_population ( filename = None , ** kwargs ) \u00b6 Load the population dictionary from file. Parameters filename ( str ) \u2013 name of the file to load save_population ( filename , ** kwargs ) \u00b6 Save the population dictionary to file. Parameters filename ( str ) \u2013 name of the file to save to. initialize ( ** kwargs ) \u00b6 Perform all initializations. Parameters kwargs ( dict ) \u2013 passed to init_people validate_pars ( ) \u00b6 Some parameters can take multiple types; this makes them consistent init_results ( ) \u00b6 Create the main results structure. We differentiate between flows, stocks, and cumulative results The prefix \u201cnew\u201d is used for flow variables, i.e. counting new events (infections/deaths/recoveries) on each timestep The prefix \u201cn\u201d is used for stock variables, i.e. counting the total number in any given state (sus/inf/rec/etc) on any particular timestep The prefix \u201ccum_\u201d is used for cumulative variables, i.e. counting the total number that have ever been in a given state at some point in the sim Note that, by definition, n_dead is the same as cum_deaths and n_recovered is the same as cum_recoveries, so we only define the cumulative versions init_people ( verbose = None , id_len = None , ** kwargs ) \u00b6 Create the people step ( ) \u00b6 Step the simulation forward in time rescale ( ) \u00b6 Dynamically rescale the population run ( do_plot = False , verbose = None , ** kwargs ) \u00b6 Run the simulation. Parameters do_plot ( bool ) \u2013 whether to plot verbose ( int ) \u2013 level of detail to print kwargs ( dict ) \u2013 passed to self.plot() Returns the results object (also modifies in-place) Return type results finalize ( verbose = None ) \u00b6 Compute final results, likelihood, etc. compute_doubling ( window = 7 , max_doubling_time = 50 ) \u00b6 Calculate doubling time using exponential approximation \u2013 a more detailed approach is in utils.py. Compares infections at time t to infections at time t-window, and uses that to compute the doubling time. For example, if there are 100 cumulative infections on day 12 and 200 infections on day 19, doubling time is 7 days. Parameters window ( float ) \u2013 the size of the window used (larger values are more accurate but less precise) max_doubling_time ( float ) \u2013 doubling time could be infinite, so this places a bound on it Returns None (modifies results in place) compute_r_eff ( ) \u00b6 Effective reproductive number based on number of people each person infected. compute_gen_time ( ) \u00b6 Calculate the generation time (or serial interval) there are two ways to do this calculation. The \u2018true\u2019 interval (exposure time to exposure time) or \u2018clinical\u2019 (symptom onset to symptom onset). likelihood ( weights = None , verbose = None ) \u2192 float \u00b6 Compute the log-likelihood of the current simulation based on the number of new diagnoses. summary_stats ( verbose = None ) \u00b6 Compute the summary statistics to display at the end of a run plot ( to_plot = None , do_save = None , fig_path = None , fig_args = None , plot_args = None , scatter_args = None , axis_args = None , legend_args = None , as_dates = True , dateformat = None , interval = None , n_cols = 1 , font_size = 18 , font_family = None , use_grid = True , use_commaticks = True , do_show = True , verbose = None ) \u00b6 Plot the results \u2013 can supply arguments for both the figure and the plots. Parameters to_plot ( dict ) \u2013 Nested dict of results to plot; see default_sim_plots for structure do_save ( bool or str ) \u2013 Whether or not to save the figure. If a string, save to that filename. fig_path ( str ) \u2013 Path to save the figure fig_args ( dict ) \u2013 Dictionary of kwargs to be passed to pl.figure() plot_args ( dict ) \u2013 Dictionary of kwargs to be passed to pl.plot() scatter_args ( dict ) \u2013 Dictionary of kwargs to be passed to pl.scatter() axis_args ( dict ) \u2013 Dictionary of kwargs to be passed to pl.subplots_adjust() legend_args ( dict ) \u2013 Dictionary of kwargs to be passed to pl.legend() as_dates ( bool ) \u2013 Whether to plot the x-axis as dates or time points dateformat ( str ) \u2013 Date string format, e.g. \u2018%B %d\u2019 interval ( int ) \u2013 Interval between tick marks n_cols ( int ) \u2013 Number of columns of subpanels to use for subplot font_size ( int ) \u2013 Size of the font font_family ( str ) \u2013 Font face use_grid ( bool ) \u2013 Whether or not to plot gridlines use_commaticks ( bool ) \u2013 Plot y-axis with commas rather than scientific notation do_show ( bool ) \u2013 Whether or not to show the figure verbose ( bool ) \u2013 Display a bit of extra information Returns Figure handle Return type fig plot_result ( key , fig_args = None , plot_args = None ) \u00b6 Simple method to plot a single result. Useful for results that aren\u2019t standard outputs. Parameters key ( str ) \u2013 the key of the result to plot fig_args ( dict ) \u2013 passed to pl.figure() plot_args ( dict ) \u2013 passed to pl.plot() Example sim . plot_result ( 'doubling_time' ) covasim.utils module \u00b6 Numerical utilities for running Covasim covasim.utils. sample ( dist = None , par1 = None , par2 = None , size = None ) \u00b6 Draw a sample from the distribution specified by the input. Parameters dist ( str ) \u2013 the distribution to sample from par1 ( float ) \u2013 the \u201cmain\u201d distribution parameter (e.g. mean) par2 ( float ) \u2013 the \u201csecondary\u201d distribution parameter (e.g. std) size ( int ) \u2013 the number of samples (default=1) Returns A length N array of samples Examples sample () # returns Unif(0,1) sample ( dist = 'normal' , par1 = 3 , par2 = 0.5 ) # returns Normal(\u03bc=3, \u03c3=0.5) Notes Lognormal distributions are parameterized with reference to the underlying normal distribution (see: https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.random.lognormal.html ), but this function assumes the user wants to specify the mean and variance of the lognormal distribution. covasim.utils. set_seed ( seed = None ) \u00b6 Reset the random seed \u2013 complicated because of Numba covasim.utils. true ( arr ) \u00b6 Returns the indices of the values of the array that are true covasim.utils. false ( arr ) \u00b6 Returns the indices of the values of the array that are false covasim.utils. defined ( arr ) \u00b6 Returns the indices of the values of the array that are not-nan covasim.utils. itrue ( arr , inds ) \u00b6 Returns the indices that are true in the array \u2013 name is short for indices[true] covasim.utils. ifalse ( arr , inds ) \u00b6 Returns the indices that are true in the array \u2013 name is short for indices[false] covasim.utils. idefined ( arr , inds ) \u00b6 Returns the indices that are true in the array \u2013 name is short for indices[defined] covasim.utils. itruei ( arr , inds ) \u00b6 Returns the indices that are true in the array \u2013 name is short for indices[true[indices]] covasim.utils. ifalsei ( arr , inds ) \u00b6 Returns the indices that are false in the array \u2013 name is short for indices[false[indices]] covasim.utils. idefinedi ( arr , inds ) \u00b6 Returns the indices that are defined in the array \u2013 name is short for indices[defined[indices]] covasim.utils. binomial_arr ( prob_arr ) \u00b6 Binomial (Bernoulli) trials each with different probabilities \u2013 return boolean array covasim.utils. multinomial ( probs , repeats ) \u00b6 A multinomial trial covasim.utils. poisson ( rate ) \u00b6 A Poisson trial covasim.utils. binomial_filter ( prob , arr ) \u00b6 Binomial \u201cfilter\u201d \u2013 return entries that passed covasim.utils. choose ( max_n , n ) \u00b6 Choose a subset of items (e.g., people) without replacement. Parameters max_n ( int ) \u2013 the total number of items n ( int ) \u2013 the number of items to choose Example choose ( 5 , 2 ) will choose 2 out of 5 people with equal probability . covasim.utils. choose_r ( max_n , n ) \u00b6 Choose a subset of items (e.g., people), with replacement. Parameters max_n ( int ) \u2013 the total number of items n ( int ) \u2013 the number of items to choose Example choose(5, 2) will choose 2 out of 5 people with equal probability. covasim.utils. choose_w ( probs , n , unique = True ) \u00b6 Choose n items (e.g. people), each with a probability from the distribution probs. Parameters probs ( array ) \u2013 list of probabilities, should sum to 1 n ( int ) \u2013 number of samples to choose unique ( bool ) \u2013 whether or not to ensure unique indices Example choose_w([0.2, 0.5, 0.1, 0.1, 0.1], 2) will choose 2 out of 5 people with nonequal probability."}, {"title": "Parameters \u2014 Covasim  documentation", "tags": "", "url": "./parameters.html", "text": "Parameters \u00b6 This file describes the expected behavior of each parameter in the model. Note: the term \u201coverall infection rate\u201d can be explored using sim.results['doubling_time'] and sim.results['r_eff'] (a higher infection rate means lower doubling times and higher R_eff ), as well as by simply looking at the epidemic curves. Population parameters \u00b6 pop_scale = Multiplicative scale for results. Test: run 2 sims, set to 10, sim.results['cum_exposed'] in 2nd sim should be 10x higher than first. pop_size = Nmber of people in the simulation. Test: len(sim.people) should equal this number. pop_infected = Initial number of people infected. Test: if 0, there should be no infections; if equals n , should be no new infections. pop_type = The type of population structure to use with the model; default 'random' , using Seattle demographics; other options are 'hybrid' (structured households and random school, work, and community contacts), 'clustered' (all clustered contacts), and 'synthpops' (requires the synthpops library, but uses data-based population structure) location = Which country or state to load demographic data from (optional) Simulation parameters \u00b6 start_day = The calendar date of the start day of the simulation. n_days = The number of days to simulate. Test: len(sim.results['t.values']) should equal this. rand_seed = Random seed for the simulation. Test: two simulations with the same seed should produce identical results except for person UIDs; otherwise, different. verbose = Level of detail to print (no test). Disease transmission parameters \u00b6 n_imports = Average daily number of imported cases (actual number is drawn from Poisson distribution) beta = Transmissibility per contact. Test: set to 0 for no infections, set to 1 for \u2248 contacts infections per day (will not be exactly equal due to overlap and other effects) asymp_factor = Effect of asymptomaticity on transmission. diag_factor = Effect of diagnosis on transmission. cont_factor = Effect of being a known contact on transmission. use_layers = Whether or not to use different contact layers contacts = The number of contacts per layer beta_layers = Transmissibility per layer Duration parameters \u00b6 exp2inf = Duration from exposed to infectious inf2sym = Duration from infectious to symptomatic sym2sev = Duration from symptomatic to severe symptoms sev2crit = Duration from severe symptoms to requiring ICU asym2rec = Duration for asymptomatics to recover mild2rec = Duration from mild symptoms to recovered sev2rec = Duration from severe symptoms to recovered crit2rec = Duration from critical symptoms to recovered crit2die = Duration from critical symptoms to death Severity parameters: Probabilities of symptom progression \u00b6 OR_no_treat = Odds ratio for how much more likely people are to die if no treatment available rel_symp_probs = Relative probability of developing symptoms rel_severe_probs = Relative probability of developing severe symptoms rel_crit_probs = Relative probability of developing critical symptoms rel_death_probs = Relative probability of dying prog_by_age = Whether to set disease progression based on the person\u2019s age prognoses = The full arrays of a person\u2019s prognosis (populated later by default) Events and interventions \u00b6 interventions = List of Intervention instances interv_func = Custom intervention function timelimit = Stop simulation if it exceeds this duration. Test: set to a small number (e.g. 1) and choose a large n / n_days . stopping_func = User-defined stopping function (no test). Health system parameters \u00b6 n_beds = Baseline assumption is that there\u2019s enough beds for the whole population (i.e., no constraints)"}, {"title": "Python Module Index \u2014 Covasim  documentation", "tags": "", "url": "./py-modindex.html", "text": "Python Module Index c c covasim covasim.base covasim.cruise_ship.model covasim.cruise_ship.parameters covasim.cruise_ship.test_cruise_sim covasim.data covasim.data.country_age_distributions covasim.data.loaders covasim.defaults covasim.interventions covasim.misc covasim.parameters covasim.people covasim.population covasim.requirements covasim.run covasim.sim covasim.utils covasim.webapp.cova_app"}, {"title": "Covasim docs \u2014 Covasim  documentation", "tags": "", "url": "./README.html", "text": "Covasim docs \u00b6 This folder includes code for building the docs. Users are unlikely to need to do this themselves. To build the docs, follow these steps: Make sure dependencies are installed: > pip install - r requirements . txt Make the documents; there are many build options, but most convenient is: > make dirhtml The built documents will be in ./_build/html ."}, {"title": "Search results \u2014 Covasim  documentation", "tags": "", "url": "./search-local.html", "text": "Search results \u00b6"}, {"title": "Search \u2014 Covasim  documentation", "tags": "", "url": "./search.html", "text": "Please activate JavaScript to enable the search functionality."}, {"title": "Run parameter sweeps \u2014 Covasim  documentation", "tags": "", "url": "./sweep.html", "text": "Run parameter sweeps \u00b6 Utilities for parameter sweeps, using Weights and Biases . These instructions are a minimal subset of these docs . To begin a sweep follow these steps: Make sure wandb is installed: > pip install wandb Login to wandb: > wandb login Initialize wandb (optional): > wandb init When asked to choose a project make sure you select covasim . If you don\u2019t see a project with this name, instead select Create New and name your project covasim . From the root of this repo , initialize a sweep: # Choose the yaml file that corresponds to the search strategy. wandb sweep sweep / sweep - random . yaml This command will print out a sweep ID . Copy that to use in the next step! Launch agent(s): wandb agent your - sweep - id From the docs : > You can run wandb agent on multiple machines or in multiple processes on the same machine, and each agent will poll the central W&B Sweep server for the next set of hyperparameters to run."}, {"title": "Run tests \u2014 Covasim  documentation", "tags": "", "url": "./tests.html", "text": "Run tests \u00b6 pytest \u00b6 pytest will automatically run all the tests in the folder. Just type pytest and it will run everything beginning test_ . You can also run run_tests . Coverage and unit tests \u00b6 To run code coverage on the unit tests, you can just type run_coverage . If that doesn\u2019t work, try the following: pip install coverage coverage run -m unittest unittest_* test_* coverage html Then open the htmlcov directory and open index.html in a browser. For more information about building and running tests in a Docker container, see Build and test in Docker ."}, {"title": "Using Covasim \u2014 Covasim  documentation", "tags": "", "url": "./usage.html", "text": "Using Covasim \u00b6 The topics in this section describe how to use Covasim for modeling COVID-19 transmission. We provide some out-of-the-box examples to aid in getting started. Usage examples Data scrapers Run parameter sweeps Covasim docs"}, {"title": "Run Covasim in the web UI \u2014 Covasim  documentation", "tags": "", "url": "./webapp.html", "text": "Run Covasim in the web UI \u00b6 The web UI consists of Static files e.g. index.html A Flask app in covid_app.py wrapped in a Sciris App It can be served in two ways: local testing or deployment. Quick local testing \u00b6 To run the app locally via Twisted, simply run the following: ./launch_flask Deployment \u00b6 Recommended deployment is using nginx to serve the static files, and gunicorn to run the Flask app. Requirements \u00b6 You must have nginx ( sudo apt install nginx ) and gunicorn ( pip install gunicorn ) installed. Set up nginx \u00b6 Copy example_nginx_config to e.g. /etc/nginx/sites-enabled/covasim (can change filename if desired). Edit the copied file to specify: The hostname/URL for the site e.g. covasim.mydomain.com . The full path to the directory containing index.html on the system running nginx . Change the port in proxy_pass line if desired - it must match the port in launch_gunicorn . Reload or restart nginx e.g. sudo service nginx reload . For example, this will start it running at localhost:8188: server { listen 8188 ; server_name localhost ; location / { root / home / my_username / covasim / covasim / webapp ; } location / api { proxy_pass http : // 127.0 . 0.1 : 8097 / ; } } Run gunicorn \u00b6 Run launch_gunicorn , optionally setting a number of workers, e.g. ./launch_gunicorn --workers=32 . This will need to be kept running to support the site (so run via nohup or screen etc.). For example: cd covasim / covasim / webapp screen - S cova_app ./ launch_gunicorn < Ctrl + D > ... screen - R cova_app Note that for local development, the --reload flag to the gunicorn command automatically reloads the site. This can be helpful if using the nginx+gunicorn setup for local development. Docker \u00b6 See Build and test in Docker or the README under the docker folder."}]};
